#!/usr/bin/env python3
#
# cvgen v0.4 2021-06-27

# Import modules

import argparse
import cvdata as cv
import geometry as geo
import functions as fn
import os

# Version
version_num = '0.4'
version_dat = '2021-06-27'
version_str = '{} ({})'.format(version_num, version_dat)

def main():
    # Define argument parsers and subparsers
    parser = argparse.ArgumentParser(description='A program for generating CVs in LaTeX. Written by Johannes Engelmayer')

    parser.add_argument('-V', '--version', action='version', version='%(prog)s '+ version_str)
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='verbosity level (-v, -vv, -vvv): '
                        'default = single-line output, v = multi-line, vv = detailed, vvv = array output')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help=('disable terminal output (terminates all verbosity)'))
    parser.add_argument('-l', '--latex', action='store_true',
                        help='execute pdflatex after creating *.tex file')
    parser.add_argument('-s', '--show', action='store_true',
                        help='show pdf after executing pdflatex')
    parser.add_argument('outfile', nargs='?', help='write to file')

    args = parser.parse_args()

    # Check verbosity level

    verbosity = args.verbose
    if args.quiet is True:
        verbosity = -1
    if verbosity >= 1:
        print(args)


    # Use config directory or create one

    config_dir = os.path.expanduser('~/.config/cvgen')
    fn.check_config_dir(config_dir)
    config_file_data = os.path.join(config_dir, 'cvdata.json')
    config_file_geo = os.path.join(config_dir, 'cvgeometry.json')
    fn.check_config_file(config_file_data)
    fn.check_config_file(config_file_geo)

    config_data = fn.read_config(config_file_data)
    config_geo = fn.read_config(config_file_geo)
    person = cv.split_config(config_data)[0]
    color_background = 'Blues-G'
    layout = geo.split_config(config_geo)[0]
    skill_decoration = True
    # Skill layout
    skill_circle = geo.split_config(config_geo)[5]
    skill_layout = geo.split_config(config_geo)[6]
    # Skill items
    skill1 = cv.SkillItem(name='Python', level=4)
    skill2 = cv.SkillItem(name='Bash', level=3)
    skill3 = cv.SkillItem(name='LaTeX', level=5)
    skill4 = cv.SkillItem(name='Git', level=5)
    # Skill groups
    group1 = cv.SkillGroup(name='Programming', skill_items=[skill1, skill2, skill3])
    group2 = cv.SkillGroup(name='Software/Tools', skill_items=[skill4])
    skills = []
    for i in range(skill_layout.number):
        skills.append('\\filldraw[color={}] ({}, {}) circle [radius={}mm]'.format(skill_circle.fillcolor, 2+i*skill_layout.distance/10, 5, skill_circle.radius))
    print(skills)

    #position = 'top'

    if layout.box_top is True:
        box_top = geo.split_config(config_geo)[1]
    if layout.box_bottom is True:
        box_bottom = geo.split_config(config_geo)[2]
    if layout.box_left is True:
        box_left = geo.split_config(config_geo)[3]
    if layout.box_right is True:
        box_right = geo.split_config(config_geo)[4]

    # Check file extension
    outfile = str(args.outfile)
    if outfile[-4:0] != '.tex':
        outfile = outfile + '.tex'
    outfile = os.path.abspath(outfile)
    # Write to file
    with open(outfile, 'w', encoding='UTF-8') as f:
        f.write('% ===== LaTeX code generated by cvgen v{} =====\n'.format(version_str))
        f.write(r'\documentclass[12pt, tikz]{standalone}' + '\n')
        f.write(r'\usepackage[sfdefault, scaled=1.0098]{FiraSans}' + '\n')
        f.write(r'\usepackage{newtxsf}' + '\n')
        f.write(r'\usepackage{tikz}' + '\n')
        f.write(r'\usetikzlibrary{positioning, colorbrewer, backgrounds}' + '\n')
        f.write(r'\begin{document}' + '\n')
        f.write('\t' + r'\pgfdeclarelayer{background}' + '\n')
        f.write('\t' + r'\pgfdeclarelayer{forebackground}' + '\n')
        f.write('\t' + r'\pgfdeclarelayer{foreground}' + '\n')
        f.write('\t' + r'\pgfsetlayers{background, forebackground, main, foreground}' + '\n')
        f.write('\t' + r'\begin{tikzpicture}' + '\n')
        f.write('\t\t' + r'\begin{pgfonlayer}{background}' + '\n')
        f.write('\t\t\t' + '\\fill[{}] (0, 0) rectangle ({}, {});\n'.format(layout.background_color, layout.width, layout.height))
        f.write('\t\t' + r'\end{pgfonlayer}' + '\n')
        f.write('\t\t' + r'\begin{pgfonlayer}{forebackground}' + '\n')
        if layout.box_top is True:
            f.write('\t\t\t' + '\\fill[{}] (0, {}) rectangle ({}, {});\n'.format(box_top.color, layout.height-box_top.height, box_top.width, layout.height))
        if layout.box_bottom is True:
            f.write('\t\t\t' + '\\fill[{}] (0, 0) rectangle ({}, {});\n'.format(box_bottom.color, box_bottom.width, box_bottom.height))
        if layout.box_left is True:
            f.write('\t\t\t' + '\\fill[{}] (0, 0) rectangle ({}, {});\n'.format(box_left.color, box_left.width, box_left.height))
        if layout.box_right is True:
            f.write('\t\t\t' + '\\fill[{}] ({}, 0) rectangle ({}, {});\n'.format(box_right.color, layout.width-box_right.width, layout.width, layout.height))
        f.write('\t\t' + r'\end{pgfonlayer}' + '\n')
        if skill_decoration is True:
            f.write('\t\t' + r'\begin{pgfonlayer}{foreground}' + '\n')
            for i in range(skill_layout.number):
                f.write('\t\t\t'+ skills[i] + ';\n')
            f.write('\t\t' + r'\end{pgfonlayer}' + '\n')
        f.write('\t' + r'\end{tikzpicture}' + '\n')
        f.write(r'\end{document}' + '\n')
    if verbosity >=1:
        print('[output] LaTeX file {} created.'.format(outfile))
    if (args.latex or args.show) is True:
        output_dir = os.path.dirname(outfile)
        cmd = 'pdflatex -synctex=1 -interaction=nonstopmode -output-directory {} {}'.format(output_dir, outfile)
        if verbosity >=1:
            print('[output] Executing pdfLaTeX: {} ...'.format(cmd))
        os.system(cmd)
        if verbosity >=1:
            print('[output] ... done!')
    if args.show is True:
        outfile_pdf = outfile[0:-4] + '.pdf'
        if verbosity >=1:
            print('[output] Opening PDF file via: mupdf {} ...'.format(outfile_pdf))
        os.system('mupdf {}'.format(outfile_pdf))


if __name__ == '__main__':
    main()

