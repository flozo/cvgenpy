#!/usr/bin/env python3

import cvdata as cv
import geometry as geo

def preamble():
    """
    Define LaTeX preamble with required packages included
    """
    l = [
        r'\documentclass[12pt, tikz]{standalone}',
        r'\usepackage[sfdefault, scaled=1.0098]{FiraSans}',
        r'\usepackage{newtxsf}',
        r'\usepackage{tikz}',
        r'\usetikzlibrary{positioning, math, colorbrewer, backgrounds}',
        ]
    return l


def declare_layers():
    """
    Define pgf layers
    """
    l = [
        r'\pgfdeclarelayer{background}', 
        r'\pgfdeclarelayer{forebackground}', 
        r'\pgfdeclarelayer{foreground}', 
        r'\pgfsetlayers{background, forebackground, main, foreground}',
        ]
    return l


def declare_variables(layout, config_geo):
    """
    Define variables for geometry data
    """
#    layout = geo.split_config(config_geo)[0]
    l = [
        r'\paperh = {}; % paper height'.format(layout.height),
        r'\paperw = {}; % paper width'.format(layout.width),
        ]
    if layout.box_top is True:
        box_top = geo.split_config(config_geo)[1]
        l.append(r'\boxth = {}; % box top height'.format(box_top.height))
    if layout.box_bottom is True:
        box_bottom = geo.split_config(config_geo)[2]
        l.append(r'\boxbh = {}; % box bottom height'.format(box_bottom.height))
    if layout.box_left is True:
        box_left = geo.split_config(config_geo)[3]
        l.append(r'\boxlw = {}; % box left width'.format(box_left.width))
    if layout.box_right is True:
        box_right = geo.split_config(config_geo)[4]
        l.append(r'\boxrw = {}; % box right width'.format(box_right.width))
#    if cv.skills.layout.show_circles is True:
#        l.append('\t\tikzset{')
#        l.append('\t\t' + r'skillbar/.pic={')
#        l.append('\t\t\t' + r'\path')
#        l.append('\t\t\t' + r'(0, 0) coordinate (-A1)')
#        l.append('\t\t\t' + r'(\x1, 0) coordinate (-A2)')
#        for i in range(2, cv.skills.layout.circle_number + 1):
#            l.append('\t\t\t' + '(\\x1*{}, 0) coordinate (-A{})'.format(i, i+1))
    return l


def draw_background(layout, config_geo):
    """
    Draw background and boxes
    """
    if layout.box_top is True:
        box_top = geo.split_config(config_geo)[1]
    if layout.box_bottom is True:
        box_bottom = geo.split_config(config_geo)[2]
    if layout.box_left is True:
        box_left = geo.split_config(config_geo)[3]
    if layout.box_right is True:
        box_right = geo.split_config(config_geo)[4]
    l = [
        '\t\t' + r'\begin{pgfonlayer}{background}',
        '\t\t\t' + '\\fill[{}] (0, 0) rectangle ({}, {});'.format(layout.background_color, layout.width, layout.height),
        '\t\t' + r'\end{pgfonlayer}',
        '\t\t' + r'\begin{pgfonlayer}{forebackground}',
        ]
    if layout.box_top is True:
        l.append('\t\t\t' + '\\fill[{}] (0, {}) rectangle (\\paperw, \\paperh); % box top'.format(box_top.color, layout.height-box_top.height))
    if layout.box_bottom is True:
        l.append('\t\t\t' + '\\fill[{}] (0, 0) rectangle (\\paperw, \\boxbh); % box bottom'.format(box_bottom.color))
    if layout.box_left is True:
        l.append('\t\t\t' + '\\fill[{}] (0, 0) rectangle (\\boxlw, \\paperh); % box left'.format(box_left.color))
    if layout.box_right is True:
        l.append('\t\t\t' + '\\fill[{}] ({}, 0) rectangle (\\paperw, \\paperh); % box right'.format(box_right.color, layout.width-box_right.width))
    l.append('\t\t' + r'\end{pgfonlayer}')
    return l


def assemble_latex(outfile, version_str, config_geo, config_data):
    layout = geo.split_config(config_geo)[0]
    # Assemble skills
    skill_layout = geo.split_config(config_geo)[6]
    skill_circle = geo.split_config(config_geo)[5]
    skills = []
    for i in range(skill_layout.number):
        skills.append('\\filldraw[color={}] ({}, {}) circle [radius={}mm]'.format(skill_circle.fillcolor, 2+i*skill_layout.distance/10, 5, skill_circle.radius))
    #Assemble education
#    edu = []

    # Write to file
    with open(outfile, 'w', encoding='UTF-8') as f:
        # Write comment with program and version info
        f.write('% ===== LaTeX code generated by cvgen v{} =====\n'.format(version_str))
        # Write LaTeX preamble
        for line in preamble():
            f.write(line + '\n')
        f.write(r'\begin{document}' + '\n')
        # Write definitions of variables
        f.write('\t' + r'\tikzmath{' + '\n')
        for line in declare_variables(layout, config_geo):
            f.write('\t\t' + line + '\n')
        f.write('\t' + r'}' + '\n')
        # Write layer declaration
        for line in declare_layers():
            f.write('\t' + line + '\n')
        f.write('\t' + r'\begin{tikzpicture}' + '\n')
        for line in draw_background(layout, config_geo):
            f.write(line + '\n')
        f.write('\t\t' + r'\begin{pgfonlayer}{foreground}' + '\n')
        for i in range(skill_layout.number):
            f.write('\t\t\t'+ skills[i] + ';\n')
        f.write('\t\t' + r'\end{pgfonlayer}' + '\n')
        f.write('\t' + r'\end{tikzpicture}' + '\n')
        f.write(r'\end{document}' + '\n')

